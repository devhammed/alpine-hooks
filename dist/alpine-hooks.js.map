{
  "version": 3,
  "sources": ["../src/hooks/useHover.js", "../src/hooks/useFocus.js", "../src/hooks/useHash.js", "../src/hooks/useWindowSize.js", "../src/hooks/useIntersecting.js", "../src/index.js"],
  "sourcesContent": ["export default function useHover(Alpine) {\n    Alpine.magic('useHover', (el, { interceptor }) => {\n        return interceptor((initialValue, getter, setter, path, key) => {\n            const element = initialValue;\n            \n            setter(false);\n\n            element.addEventListener('mouseover', () => {\n                setter(true);\n            })\n    \n            element.addEventListener('mouseout', () => {\n                setter(false);\n            })\n\n            return getter();\n        })\n    })\n};", "export default function useFocus(Alpine) {\n    Alpine.magic('useFocus', (el, { interceptor }) => {\n        return interceptor((initialValue, getter, setter, path, key) => {\n            const element = initialValue;\n            \n            setter(false);\n\n            element.addEventListener('focus', () => {\n                setter(true);\n            })\n    \n            element.addEventListener('blur', () => {\n                setter(false);\n            })\n\n            return getter();\n        })\n    })\n};", "export default function useHash(Alpine) {\n    Alpine.magic('useHash', (el, { interceptor, effect }) => {\n        return interceptor((initialValue, getter, setter, path, key) => {            \n            if (window.location.hash === '') {\n                window.location.hash = initialValue;\n            }\n\n            const initial = window.location.hash || initialValue;\n\n            setter(initial);\n\n            window.addEventListener('hashchange', () => {\n                setter(window.location.hash);\n            })\n\n            effect(() => {\n                let hash = getter();\n\n                window.location.hash = hash;\n\n                setter(hash)\n            })\n            \n            return initial;\n        })\n    })\n};", "export default function useWindowSize(Alpine) {\n    Alpine.magic('useWindowSize', () => {\n        return () => {\n            const size = Alpine.reactive({\n                width: window.innerWidth,\n                height: window.innerHeight\n            })\n\n            window.addEventListener('resize', () => {\n                size.width = window.innerWidth;\n                size.height = window.innerHeight;\n            })\n\n            return size\n        }\n    })\n};", "export default function useIntersecting(Alpine) {\n    Alpine.magic('useIntersecting', (el, { interceptor }) => {\n        return interceptor((options, getter, setter) => {\n            const target = options instanceof Element\n                ? options\n                : options.target;\n\n            const root = (options.root instanceof Element || options.root instanceof Document)\n                ? options.root\n                : null;\n\n            const rootMargin = options.rootMargin || '0px';\n\n            const threshold = options.threshold || 0;\n\n            const initial = options.initial || false;\n\n            console.log('options', { target, root, rootMargin, threshold, initial });\n\n            const observer = new IntersectionObserver(\n                ([entry]) => setter(entry.isIntersecting),\n                { root, rootMargin, threshold },\n            );\n\n            setter(initial);\n\n            observer.observe(target);\n\n            return getter();\n        });\n    });\n}\n", "import useHover from './hooks/useHover'\nimport useFocus from './hooks/useFocus'\nimport useHash from './hooks/useHash'\nimport useWindowSize from './hooks/useWindowSize'\nimport useIntersecting from './hooks/useIntersecting'\n\nexport default function (Alpine) {\n    Alpine.plugin(useHover);\n    Alpine.plugin(useFocus);\n    Alpine.plugin(useHash);\n    Alpine.plugin(useWindowSize);\n    Alpine.plugin(useIntersecting);\n};\n\nexport { useHover, useFocus, useHash, useWindowSize, useIntersecting };\n"],
  "mappings": "AAAe,SAARA,EAA0BC,EAAQ,CACrCA,EAAO,MAAM,WAAY,CAACC,EAAI,CAAE,YAAAC,CAAY,IACjCA,EAAY,CAACC,EAAcC,EAAQC,EAAQC,EAAMC,IAAQ,CAC5D,IAAMC,EAAUL,EAEhB,OAAAE,EAAO,EAAK,EAEZG,EAAQ,iBAAiB,YAAa,IAAM,CACxCH,EAAO,EAAI,CACf,CAAC,EAEDG,EAAQ,iBAAiB,WAAY,IAAM,CACvCH,EAAO,EAAK,CAChB,CAAC,EAEMD,EAAO,CAClB,CAAC,CACJ,CACL,CClBe,SAARK,EAA0BC,EAAQ,CACrCA,EAAO,MAAM,WAAY,CAACC,EAAI,CAAE,YAAAC,CAAY,IACjCA,EAAY,CAACC,EAAcC,EAAQC,EAAQC,EAAMC,IAAQ,CAC5D,IAAMC,EAAUL,EAEhB,OAAAE,EAAO,EAAK,EAEZG,EAAQ,iBAAiB,QAAS,IAAM,CACpCH,EAAO,EAAI,CACf,CAAC,EAEDG,EAAQ,iBAAiB,OAAQ,IAAM,CACnCH,EAAO,EAAK,CAChB,CAAC,EAEMD,EAAO,CAClB,CAAC,CACJ,CACL,CClBe,SAARK,EAAyBC,EAAQ,CACpCA,EAAO,MAAM,UAAW,CAACC,EAAI,CAAE,YAAAC,EAAa,OAAAC,CAAO,IACxCD,EAAY,CAACE,EAAcC,EAAQC,EAAQC,EAAMC,IAAQ,CACxD,OAAO,SAAS,OAAS,KACzB,OAAO,SAAS,KAAOJ,GAG3B,IAAMK,EAAU,OAAO,SAAS,MAAQL,EAExC,OAAAE,EAAOG,CAAO,EAEd,OAAO,iBAAiB,aAAc,IAAM,CACxCH,EAAO,OAAO,SAAS,IAAI,CAC/B,CAAC,EAEDH,EAAO,IAAM,CACT,IAAIO,EAAOL,EAAO,EAElB,OAAO,SAAS,KAAOK,EAEvBJ,EAAOI,CAAI,CACf,CAAC,EAEMD,CACX,CAAC,CACJ,CACL,CC1Be,SAARE,EAA+BC,EAAQ,CAC1CA,EAAO,MAAM,gBAAiB,IACnB,IAAM,CACT,IAAMC,EAAOD,EAAO,SAAS,CACzB,MAAO,OAAO,WACd,OAAQ,OAAO,WACnB,CAAC,EAED,cAAO,iBAAiB,SAAU,IAAM,CACpCC,EAAK,MAAQ,OAAO,WACpBA,EAAK,OAAS,OAAO,WACzB,CAAC,EAEMA,CACX,CACH,CACL,CChBe,SAARC,EAAiCC,EAAQ,CAC5CA,EAAO,MAAM,kBAAmB,CAACC,EAAI,CAAE,YAAAC,CAAY,IACxCA,EAAY,CAACC,EAASC,EAAQC,IAAW,CAC5C,IAAMC,EAASH,aAAmB,QAC5BA,EACAA,EAAQ,OAERI,EAAQJ,EAAQ,gBAAgB,SAAWA,EAAQ,gBAAgB,SACnEA,EAAQ,KACR,KAEAK,EAAaL,EAAQ,YAAc,MAEnCM,EAAYN,EAAQ,WAAa,EAEjCO,EAAUP,EAAQ,SAAW,GAEnC,QAAQ,IAAI,UAAW,CAAE,OAAAG,EAAQ,KAAAC,EAAM,WAAAC,EAAY,UAAAC,EAAW,QAAAC,CAAQ,CAAC,EAEvE,IAAMC,EAAW,IAAI,qBACjB,CAAC,CAACC,CAAK,IAAMP,EAAOO,EAAM,cAAc,EACxC,CAAE,KAAAL,EAAM,WAAAC,EAAY,UAAAC,CAAU,CAClC,EAEA,OAAAJ,EAAOK,CAAO,EAEdC,EAAS,QAAQL,CAAM,EAEhBF,EAAO,CAClB,CAAC,CACJ,CACL,CCzBe,SAARS,EAAkBC,EAAQ,CAC7BA,EAAO,OAAOC,CAAQ,EACtBD,EAAO,OAAOE,CAAQ,EACtBF,EAAO,OAAOG,CAAO,EACrBH,EAAO,OAAOI,CAAa,EAC3BJ,EAAO,OAAOK,CAAe,CACjC",
  "names": ["useHover", "Alpine", "el", "interceptor", "initialValue", "getter", "setter", "path", "key", "element", "useFocus", "Alpine", "el", "interceptor", "initialValue", "getter", "setter", "path", "key", "element", "useHash", "Alpine", "el", "interceptor", "effect", "initialValue", "getter", "setter", "path", "key", "initial", "hash", "useWindowSize", "Alpine", "size", "useIntersecting", "Alpine", "el", "interceptor", "options", "getter", "setter", "target", "root", "rootMargin", "threshold", "initial", "observer", "entry", "src_default", "Alpine", "useHover", "useFocus", "useHash", "useWindowSize", "useIntersecting"]
}
